DEv wizard is here:
https://github.com/ehennestad/ebrains_wizard_eh/tree/dev
https://metadata-wizard-dev.apps.ebrains.eu

forked from prod:
PROD:
https://github.com/HumanBrainProject/ebrains_wizard

Full stack SPA single-page app using react for front end and express node server for backend.

$ cd server
$ npm init -y
$ cd ..
$ npx create-react-app frontend

some errors when installing react:
A complete log of this run can be found in: 
C:\Users\mayaek\AppData\Local\npm-cache\_logs\2025-01-15T13_51_30_380Z-debug-0.log

application structure:

the backend express server entry point is app.js

added "type":"module" to ensure ES8 
$ cd server
$ npm install express
$ npm install cors
$ npm install winston
$ npm install dotenv


to check what is globally installed:
$ npm list -g --depth=0
locally installed: 
$ npm list --depth=0

to instally localy as a development dependency dependency:
$ npm install --save-dev nodemon

$ npm install @babel/plugin-proposal-private-property-in-object --save-dev

clean node_modules folder and reinstall dependencies (optional):
$ rm -rf node_modules
$ rm package-lock.json  # or yarn.lock
$ npm install
-------------------------------

i removed all webVitals and the webvitals.js file 
the defaukt app.css is placed inside default_react folder

---------------------------
at deployment:  

to setup dependencies: 
cd server
npm install
cd frontend
npm install

/metadata-wizard
  /frontend
    /public
      logo.png
    /src
      /components
        App.js
  /server
    /routes
  .env
  .gitignore
  README

At deployment:
check at the end which files are missing inside the react folder, maybe robots.txt
Cross-Origin Issues: When backends are accessed by the frontend (e.g., API calls), 
configure backend CORS policies properly.

Use Node.js (with Express, for example) to serve the static files generated by your React appâ€™s build process.
Define your API endpoints within the same Node.js application to handle form submissions and other backend processing.
// Serve the static files from the React app
app.use(express.static(path.join(__dirname, 'build')));
// The "catchall" handler: for any request that doesn't match above, serve the React app homepage
app.get('*', (req, res) => {
  res.sendFile(path.join(__dirname, 'build', 'index.html'));
});
-----------------------------
,
  "devDependencies": {
    "@babel/plugin-transform-private-property-in-object": "^7.x.x"
  }

For dev:
Using a proxy during development is a common practice to handle client-server communication 
between your React development server and your backend API server seamlessly. 
This setup allows you to maintain features like hot reloading while running 
both the frontend and backend servers independently. 
Here's how you can configure a proxy in your React application:  
in package,json: "proxy": "http://localhost:5000"
--------------------------------------
reinstall react:
rm -rf node_modules package-lock.json
npm install
--------------------------
npm install
npm audit fix --force

npm audit
npm audit fix

npm cache clean --force

react@^19.0.0 react-dom@^19.0.0
----------------------------------

deleted everything from the repo and reinstall react first, then I will integrate express server.
$ npx create-react-app .


