DEv wizard is here:
https://github.com/ehennestad/ebrains_wizard_eh/tree/dev
https://metadata-wizard-dev.apps.ebrains.eu

forked from prod:
PROD:
https://github.com/HumanBrainProject/ebrains_wizard

Full stack SPA single-page app using react for front end and express node server for backend.

$ cd server
$ npm init -y
$ cd ..
$ npx create-react-app frontend

some errors when installing react:
A complete log of this run can be found in: 
C:\Users\mayaek\AppData\Local\npm-cache\_logs\2025-01-15T13_51_30_380Z-debug-0.log

application structure:

the backend express server entry point is app.js

added "type":"module" to ensure ES8 
$ cd server
$ npm install express
$ npm install cors
$ npm install winston
$ npm install dotenv


to check what is globally installed:
$ npm list -g --depth=0
locally installed: 
$ npm list --depth=0

to instally localy as a development dependency dependency:
$ npm install --save-dev nodemon

$ npm install @babel/plugin-proposal-private-property-in-object --save-dev

clean node_modules folder and reinstall dependencies (optional):
$ rm -rf node_modules
$ rm package-lock.json  # or yarn.lock
$ npm install
-------------------------------

i removed all webVitals and the webvitals.js file 
the defaukt app.css is placed inside default_react folder

---------------------------
at deployment:  

to setup dependencies: 
cd server
npm install
cd frontend
npm install

/metadata-wizard
  /frontend
    /public
      logo.png
    /src
      /components
        App.js
  /server
    /routes
  .env
  .gitignore
  README

At deployment:
check at the end which files are missing inside the react folder, maybe robots.txt
Cross-Origin Issues: When backends are accessed by the frontend (e.g., API calls), 
configure backend CORS policies properly.

Use Node.js (with Express, for example) to serve the static files generated by your React appâ€™s build process.
Define your API endpoints within the same Node.js application to handle form submissions and other backend processing.
// Serve the static files from the React app
app.use(express.static(path.join(__dirname, 'build')));
// The "catchall" handler: for any request that doesn't match above, serve the React app homepage
app.get('*', (req, res) => {
  res.sendFile(path.join(__dirname, 'build', 'index.html'));
});
-----------------------------
,
  "devDependencies": {
    "@babel/plugin-transform-private-property-in-object": "^7.x.x"
  }

For dev:
Using a proxy during development is a common practice to handle client-server communication 
between your React development server and your backend API server seamlessly. 
This setup allows you to maintain features like hot reloading while running 
both the frontend and backend servers independently. 
Here's how you can configure a proxy in your React application:  
in package,json: "proxy": "http://localhost:5000"
--------------------------------------
reinstall react:
rm -rf node_modules package-lock.json
npm install
--------------------------
npm install
npm audit fix --force

npm audit
npm audit fix

npm cache clean --force

react@^19.0.0 react-dom@^19.0.0
----------------------------------

I deleted everything from the repo and reinstall react first, then I will integrate express server.
$ npx create-react-app .

to start the frontend:
$ npm start

$ cd server
$ npm init -y

npm notice
npm notice New major version of npm available! 10.9.0 -> 11.0.0
npm notice Changelog: https://github.com/npm/cli/releases/tag/v11.0.0
npm notice To update run: npm install -g npm@11.0.0
npm notice

$ npm install express 
$ npm install dotenv  
$ npm install --save-dev nodemon
$ npm install cors
$ npm install winston

To start the backend server:
$ npm run dev

react find in .env file PORT=4000 and starts by default there

to change: $ set PORT=4000 && npm start

$ npm install antd    --> 8 vulnerabilities (2 moderate, 6 high)
$ npm install -g npm@11.0.0

$ npm cache verify

const Component = () => {
  // Potential additional logic here
  return (
    <>
      {/* JSX */}
    </>
  );
};

https://metadata-wizard.apps.ebrains.eu/?TicketNumber=4823798

target="_blank" in ref

when react rerender: https://react.dev/reference/react/memo

export default - is the main parent component

https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map

always try to avoid redundant state
-----------------------------

When you're using ECMAScript modules (ESM) in Node.js, 
the __dirname and __filename globals are not available by default

display: block , inline-block 
------------------------------------------------------------------------------------------------
Running a React application and an Express server on the same port involves integrating them 
so that the React app acts as the frontend while the Express server provides the backend services. 
This setup requires a proxy mechanism during development and possibly serving the React app 
from the Express server in production.
Set up proxying in your React app's package.json to handle API requests during development.
Add to package.json of your React app: "proxy": "http://localhost:5000"
This proxy setting will forward any unmatched request 
(i.e., requests that are not for your React app's pages) to the backend Express server.

run the express server:
node server/index.js
in another terminal run react:
npm start
------------------------------------------------------------------------------------------------
Development: Requests to /api/data will be forwarded to the Express server by the proxy.
Production: The React app's static files are served by Express, and it also handles API requests via /api
-------------------------------------------
to test post request in PowerShell:
$headers = @{"Content-Type" = "application/json"}
$body = @{
     message = "Application is running"}
$jsonBody = $body | ConvertTo-Json
Invoke-RestMethod -Uri "http://localhost:5000/api/data" -Method POST -Headers $headers -Body $jsonBody

--------------------------------------------------
to test get request in PowerShell:
$headers = @{"Content-Type" = "application/json"}
Invoke-RestMethod -Uri "http://localhost:5000/api/data" -Method GET
--------------------------------------------------
to test form submission post request:
$headers = @{"Content-Type" = "application/json"}
>> $body = @{
>>      message = "Application is running"}
>> $jsonBody = $body | ConvertTo-Json
>> Invoke-RestMethod -Uri "http://localhost:5000/submit-metadata" -Method POST -Headers $headers -Body $jsonBody

---------------------------

$ npm install redux react-redux
https://redux.js.org/tutorials/essentials/part-1-overview-concepts

https://rjsf-team.github.io/react-jsonschema-form/docs/

nice docs about css and html:
https://internetingishard.netlify.app/html-and-css/index.html

node --trace-deprecation

in package.json
 you can"start": "node --trace-deprecation ./node_modules/react-scripts/bin/react-scripts.js start",

 https://nodejs.org/en/blog/vulnerability/january-2025-security-releases